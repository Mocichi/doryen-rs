use bracket_lib::prelude::VirtualKeyCode;
use std::iter::Filter;

/// Provides information about user input.
/// Possible values for the `key` scancode parameter can be found in unrust/uni-app's `translate_scan_code`
/// [function](https://github.com/unrust/uni-app/blob/41246b070567e3267f128fff41ededf708149d60/src/native_keycode.rs#L160).
/// Warning, there are some slight variations from one OS to another, for example the `Command`, `F13`, `F14`, `F15` keys
/// only exist on Mac.
///
/// State functions like [`InputApi::key`], [`InputApi::mouse_button`] and [`InputApi::mouse_pos`] always work.
/// On another hand, pressed/released event functions should be called only in the update function.
///
pub trait InputApi {
    // keyboard
    /// return the current status of a key (true if pressed)
    fn key(&self, key: &str) -> bool;
    /// return true if a key was pressed since last update.
    fn key_pressed(&mut self, key: &str) -> bool;
    /// return an iterator over all the keys that were pressed since last update.
    fn keys_pressed(&self) -> Keys;
    /// return true if a key was released since last update.
    fn key_released(&mut self, key: &str) -> bool;
    /// return an iterator over all the keys that were released since last update.
    fn keys_released(&self) -> Keys;
    /// characters typed since last update
    fn text(&self) -> String;
    // mouse
    /// return the current status of a mouse button (true if pressed)
    fn mouse_button(&self, num: usize) -> bool;
    /// return true if a mouse button was pressed since last update.
    fn mouse_button_pressed(&mut self, num: usize) -> bool;
    /// return true if a mouse button was released since last update.
    fn mouse_button_released(&mut self, num: usize) -> bool;
    /// return the current mouse position in console cells coordinates (float value to have subcell precision)
    fn mouse_pos(&self) -> (f32, f32);
    /// Whether the window close button was clicked
    fn close_requested(&self) -> bool;
}

type KeyMapFilter<'a> =
    Filter<std::collections::hash_map::Iter<'a, String, bool>, fn(&(&'a String, &'a bool)) -> bool>;

/// An iterator visiting all keys in arbitrary order.
pub struct Keys<'a> {
    inner: KeyMapFilter<'a>,
}

impl<'a> Iterator for Keys<'a> {
    type Item = &'a str;

    fn next(&mut self) -> Option<Self::Item> {
        self.inner.next().map(|(k, _)| k.as_ref())
    }
}

#[cfg(target_os = "macos")]
pub(crate) fn translate_scan_code(scan_code: &str) -> u32 {
    match scan_code {
        "Digit1" => 0x12,
        "Digit2" => 0x13,
        "Digit3" => 0x14,
        "Digit4" => 0x15,
        "Digit5" => 0x17,
        "Digit6" => 0x16,
        "Digit7" => 0x1A,
        "Digit8" => 0x1C,
        "Digit9" => 0x19,
        "Digit0" => 0x1D,
        "KeyA" => 0x00,
        "KeyB" => 0x0B,
        "KeyC" => 0x08,
        "KeyD" => 0x02,
        "KeyE" => 0x0E,
        "KeyF" => 0x03,
        "KeyG" => 0x05,
        "KeyH" => 0x04,
        "KeyI" => 0x22,
        "KeyJ" => 0x26,
        "KeyK" => 0x28,
        "KeyL" => 0x25,
        "KeyM" => 0x2E,
        "KeyN" => 0x2D,
        "KeyO" => 0x1F,
        "KeyP" => 0x23,
        "KeyQ" => 0x0C,
        "KeyR" => 0x0F,
        "KeyS" => 0x01,
        "KeyT" => 0x11,
        "KeyU" => 0x20,
        "KeyV" => 0x09,
        "KeyW" => 0x0D,
        "KeyX" => 0x07,
        "KeyY" => 0x10,
        "KeyZ" => 0x06,
        "Escape" => 0x35,
        "F1" => 0x7A,
        "F2" => 0x78,
        "F3" => 0x63,
        "F4" => 0x76,
        "F5" => 0x60,
        "F6" => 0x61,
        "F7" => 0x62,
        "F8" => 0x64,
        "F9" => 0x65,
        "F10" => 0x6D,
        "F11" => 0x67,
        "F12" => 0x6F,
        "F13" => 0x69,
        "F14" => 0x6B,
        "F15" => 0x71,
        // "Snapshot" => 0x37,
        // "ScrollLock" => 0x46,
        // Pause => "Pause",
        // "Insert" => 0x52,
        "Home" => 0x73,
        "Delete" => 0x75,
        "End" => 0x77,
        "PageDown" => 0x79,
        "PageUp" => 0x74,
        "ArrowLeft" => 0x7B,
        "ArrowUp" => 0x7E,
        "ArrowRight" => 0x7C,
        "ArrowDown" => 0x7D,
        "Backspace" => 0x33,
        "Enter" => 0x24,
        "Space" => 0x31,
        // Compose => "",
        "NumLock" => 0x47,
        "Numpad0" => 0x52,
        "Numpad1" => 0x53,
        "Numpad2" => 0x54,
        "Numpad3" => 0x55,
        "Numpad4" => 0x56,
        "Numpad5" => 0x57,
        "Numpad6" => 0x58,
        "Numpad7" => 0x59,
        "Numpad8" => 0x5B,
        "Numpad9" => 0x5C,
        // AbntC1 => "",
        // AbntC2 => "",
        "NumpadAdd" => 0x45,
        // Apostrophe => "Backslash",
        // Apps => "",
        // At => "",
        // Ax => "",
        "Backslash" => 0x2A,
        // Calculator => "",
        "CapsLock" => 0x39,
        "Colon" => 0x29,
        "Comma" => 0x2B,
        // Convert => "",
        "NumpadDecimal" => 0x41,
        "NumpadDivide" => 0x4B,
        "Equal" => 0x18,
        "Backquote" => 0x32,
        // Kana => "",
        // Kanji => "",
        // LAlt => "",
        "BracketLeft" => 0x21,
        "ControlLeft" => 0x3B,
        // "AltLeft" => 0x38,
        "ShiftLeft" => 0x38,
        "Command" => 0x37,
        // "LeftWin" => 0x5B,
        // Mail => "",
        // MediaSelect => "",
        // MediaStop => "",
        "Minus" => 0x1B,
        "NumpadMultiply" => 0x43,
        // Mute => "",
        // MyComputer => "",
        // NavigateForward => "",
        // NavigateBackward => "",
        // NextTrack => "",
        // NoConvert => "",
        // NumpadComma => "NumpadComma",
        "NumpadEnter" => 0x4C,
        "NumpadEqual" => 0x51,
        // OEM102 => "",
        "Period" => 0x2F,
        // PlayPause => "",
        // Power => "",
        // PrevTrack => "",
        // RAlt => "",
        "BracketRight" => 0x1E,
        // RControl => "ControlRight", // Same as ControlLeft
        // RMenu => "AltRight", // Same as ControlLeft
        // "ShiftRight" => 0x36,
        // RWin => "",
        // "Semicolon" => 0x27,
        "Slash" => 0x2C,
        // Sleep => "",
        // Stop => "",
        "NumpadSubtract" => 0x4E,
        // Sysrq => "",
        "Tab" => 0x30,
        // Underline => "",
        // Unlabeled => "",
        // VolumeDown => "",
        // VolumeUp => "",
        // Wake => "",
        // WebBack => "",
        // WebFavorites => "",
        // WebForward => "",
        // WebHome => "",
        // WebRefresh => "",
        // WebSearch => "",
        // WebStop => "",
        // Yen => "",
        // Caret => "Caret",
        _ => "",
    }
}

#[cfg(target_os = "windows")]
pub(crate) fn translate_scan_code(scan_code: &str) -> u32 {
    match scan_code {
        "Digit1" => 0x02,
        "Digit2" => 0x03,
        "Digit3" => 0x04,
        "Digit4" => 0x05,
        "Digit5" => 0x06,
        "Digit6" => 0x07,
        "Digit7" => 0x08,
        "Digit8" => 0x09,
        "Digit9" => 0x0A,
        "Digit0" => 0x0B,
        "KeyA" => 0x1E,
        "KeyB" => 0x30,
        "KeyC" => 0x2E,
        "KeyD" => 0x20,
        "KeyE" => 0x12,
        "KeyF" => 0x21,
        "KeyG" => 0x22,
        "KeyH" => 0x23,
        "KeyI" => 0x17,
        "KeyJ" => 0x24,
        "KeyK" => 0x25,
        "KeyL" => 0x26,
        "KeyM" => 0x32,
        "KeyN" => 0x31,
        "KeyO" => 0x18,
        "KeyP" => 0x19,
        "KeyQ" => 0x10,
        "KeyR" => 0x13,
        "KeyS" => 0x1F,
        "KeyT" => 0x14,
        "KeyU" => 0x16,
        "KeyV" => 0x2F,
        "KeyW" => 0x11,
        "KeyX" => 0x2D,
        "KeyY" => 0x15,
        "KeyZ" => 0x2C,
        "Escape" => 0x01,
        "F1" => 0x3B,
        "F2" => 0x3C,
        "F3" => 0x3D,
        "F4" => 0x3E,
        "F5" => 0x3F,
        "F6" => 0x40,
        "F7" => 0x41,
        "F8" => 0x42,
        "F9" => 0x43,
        "F10" => 0x44,
        "F11" => 0x85,
        "F12" => 0x86,
        // F13 => "F13",
        // F14 => "F14",
        // F15 => "F15",
        "Snapshot" => 0x37,
        "ScrollLock" => 0x46,
        // Pause => "Pause",
        "Insert" => 0x52,
        "Home" => 0x47,
        "Delete" => 0x53,
        "End" => 0x4F,
        "PageDown" => 0x51,
        "PageUp" => 0x49,
        "ArrowLeft" => 0x4B,
        "ArrowUp" => 0x48,
        "ArrowRight" => 0x4D,
        "ArrowDown" => 0x50,
        "Backspace" => 0x0E,
        "Enter" => 0x1C,
        "Space" => 0x39,
        // Compose => "",
        "NumLock" => 0x45,
        // Numpad0 => "Numpad0", // Same as Insert
        // Numpad1 => "Numpad1", // Same as End
        // Numpad2 => "Numpad2", // Same as ArrowDown
        // Numpad3 => "Numpad3", // Same as PageDown
        // Numpad4 => "Numpad4", // Same as ArrowLeft
        "Numpad5" => 0x4C,
        // Numpad6 => "Numpad6", // Same as ArrowRight
        // Numpad7 => "Numpad7", // Same as Home
        // Numpad8 => "Numpad8", // Same as ArrowUp
        // Numpad9 => "Numpad9", // Same as PageUp
        // AbntC1 => "",
        // AbntC2 => "",
        "NumpadAdd" => 0x4E,
        // Apostrophe => "Backslash",
        // Apps => "",
        // At => "",
        // Ax => "",
        "Backslash" => 0x2B,
        // Calculator => "",
        "CapsLock" => 0x3A,
        "Colon" => 0x27,
        "Comma" => 0x33,
        // Convert => "",
        // Decimal => "NumpadDecimal", // Same as Delete
        "NumpadDivide" => 0x35,
        "Equal" => 0x0D,
        "Backquote" => 0x29,
        // Kana => "",
        // Kanji => "",
        // LAlt => "",
        "BracketLeft" => 0x1A,
        "ControlLeft" => 0x1D,
        "AltLeft" => 0x38,
        "ShiftLeft" => 0x2A,
        "LeftWin" => 0x5B,
        // Mail => "",
        // MediaSelect => "",
        // MediaStop => "",
        "Minus" => 0x0C,
        // Multiply => "NumpadMultiply", // Same as Snapshot
        // Mute => "",
        // MyComputer => "",
        // NavigateForward => "",
        // NavigateBackward => "",
        // NextTrack => "",
        // NoConvert => "",
        // NumpadComma => "NumpadComma",
        // NumpadEnter => "NumpadEnter", // Same as Enter
        // NumpadEquals => "NumpadEqual",
        // OEM102 => "",
        "Period" => 0x34,
        // PlayPause => "",
        // Power => "",
        // PrevTrack => "",
        // RAlt => "",
        "BracketRight" => 0x1B,
        // RControl => "ControlRight", // Same as ControlLeft
        // RMenu => "AltRight", // Same as ControlLeft
        "ShiftRight" => 0x36,
        // RWin => "",
        // "Semicolon" => 0x27,
        // "Slash" => 0x35, // Same as NumpadDivide
        // Sleep => "",
        // Stop => "",
        "NumpadSubtract" => 0x4A,
        // Sysrq => "",
        "Tab" => 0x0F,
        // Underline => "",
        // Unlabeled => "",
        // VolumeDown => "",
        // VolumeUp => "",
        // Wake => "",
        // WebBack => "",
        // WebFavorites => "",
        // WebForward => "",
        // WebHome => "",
        // WebRefresh => "",
        // WebSearch => "",
        // WebStop => "",
        // Yen => "",
        // Caret => "Caret",
        _ => 0,
    }
}

#[cfg(target_os = "linux")]
pub(crate) fn translate_scan_code(scan_code: &str) -> u32 {
    match scan_code {
        "Digit1" => 0x02,
        "Digit2" => 0x03,
        "Digit3" => 0x04,
        "Digit4" => 0x05,
        "Digit5" => 0x06,
        "Digit6" => 0x07,
        "Digit7" => 0x08,
        "Digit8" => 0x09,
        "Digit9" => 0x0A,
        "Digit0" => 0x0B,
        "KeyA" => 0x1E,
        "KeyB" => 0x30,
        "KeyC" => 0x2E,
        "KeyD" => 0x20,
        "KeyE" => 0x12,
        "KeyF" => 0x21,
        "KeyG" => 0x22,
        "KeyH" => 0x23,
        "KeyI" => 0x17,
        "KeyJ" => 0x24,
        "KeyK" => 0x25,
        "KeyL" => 0x26,
        "KeyM" => 0x32,
        "KeyN" => 0x31,
        "KeyO" => 0x18,
        "KeyP" => 0x19,
        "KeyQ" => 0x10,
        "KeyR" => 0x13,
        "KeyS" => 0x1F,
        "KeyT" => 0x14,
        "KeyU" => 0x16,
        "KeyV" => 0x2F,
        "KeyW" => 0x11,
        "KeyX" => 0x2D,
        "KeyY" => 0x15,
        "KeyZ" => 0x2C,
        "Escape" => 0x01,
        "F1" => 0x3B,
        "F2" => 0x3C,
        "F3" => 0x3D,
        "F4" => 0x3E,
        "F5" => 0x3F,
        "F6" => 0x40,
        "F7" => 0x41,
        "F8" => 0x42,
        "F9" => 0x43,
        "F10" => 0x44,
        "F11" => 0x85,
        "F12" => 0x86,
        // F13 => "F13",
        // F14 => "F14",
        // F15 => "F15",
        "Snapshot" => 0x37,
        "ScrollLock" => 0x46,
        // Pause => "Pause",
        "Insert" => 0x52,
        "Home" => 0x47,
        "Delete" => 0x53,
        "End" => 0x4F,
        "PageDown" => 0x6D,
        "PageUp" => 0x68,
        "ArrowLeft" => 0x69,
        "ArrowUp" => 0x67,
        "ArrowRight" => 0x6a,
        "ArrowDown" => 0x6c,
        "Backspace" => 0x0E,
        "Enter" => 0x1C,
        "Space" => 0x39,
        // Compose => "",
        "NumLock" => 0x45,
        // Numpad0 => "Numpad0", // Same as Insert
        // Numpad1 => "Numpad1", // Same as End
        // Numpad2 => "Numpad2", // Same as ArrowDown
        // Numpad3 => "Numpad3", // Same as PageDown
        // Numpad4 => "Numpad4", // Same as ArrowLeft
        "Numpad5" => 0x4C,
        // Numpad6 => "Numpad6", // Same as ArrowRight
        // Numpad7 => "Numpad7", // Same as Home
        // Numpad8 => "Numpad8", // Same as ArrowUp
        // Numpad9 => "Numpad9", // Same as PageUp
        // AbntC1 => "",
        // AbntC2 => "",
        "NumpadAdd" => 0x4E,
        // Apostrophe => "Backslash",
        // Apps => "",
        // At => "",
        // Ax => "",
        "Backslash" => 0x2B,
        // Calculator => "",
        "CapsLock" => 0x3A,
        "Colon" => 0x27,
        "Comma" => 0x33,
        // Convert => "",
        // Decimal => "NumpadDecimal", // Same as Delete
        "NumpadDivide" => 0x35,
        "Equal" => 0x0D,
        "Backquote" => 0x29,
        // Kana => "",
        // Kanji => "",
        // LAlt => "",
        "BracketLeft" => 0x1A,
        "ControlLeft" => 0x1D,
        "AltLeft" => 0x38,
        "ShiftLeft" => 0x2A,
        "LeftWin" => 0x5B,
        // Mail => "",
        // MediaSelect => "",
        // MediaStop => "",
        "Minus" => 0x0C,
        // Multiply => "NumpadMultiply", // Same as Snapshot
        // Mute => "",
        // MyComputer => "",
        // NavigateForward => "",
        // NavigateBackward => "",
        // NextTrack => "",
        // NoConvert => "",
        // NumpadComma => "NumpadComma",
        // NumpadEnter => "NumpadEnter", // Same as Enter
        // NumpadEquals => "NumpadEqual",
        // OEM102 => "",
        "Period" => 0x34,
        // PlayPause => "",
        // Power => "",
        // PrevTrack => "",
        // RAlt => "",
        "BracketRight" => 0x1B,
        // RControl => "ControlRight", // Same as ControlLeft
        // RMenu => "AltRight", // Same as ControlLeft
        "ShiftRight" => 0x36,
        // RWin => "",
        // "Semicolon" => 0x27,
        // "Slash" => 0x35, // Same as NumpadDivide
        // Sleep => "",
        // Stop => "",
        "NumpadSubtract" => 0x4A,
        // Sysrq => "",
        "Tab" => 0x0F,
        // Underline => "",
        // Unlabeled => "",
        // VolumeDown => "",
        // VolumeUp => "",
        // Wake => "",
        // WebBack => "",
        // WebFavorites => "",
        // WebForward => "",
        // WebHome => "",
        // WebRefresh => "",
        // WebSearch => "",
        // WebStop => "",
        // Yen => "",
        // Caret => "Caret",
        _ => "",
    }
}

pub(crate) fn translate_virtual_key(key_code: &str) -> Option<VirtualKeyCode> {
    match key_code {
        "Digit1" => Some(VirtualKeyCode::Key1),
        "Digit2" => Some(VirtualKeyCode::Key2),
        "Digit3" => Some(VirtualKeyCode::Key3),
        "Digit4" => Some(VirtualKeyCode::Key4),
        "Digit5" => Some(VirtualKeyCode::Key5),
        "Digit6" => Some(VirtualKeyCode::Key6),
        "Digit7" => Some(VirtualKeyCode::Key7),
        "Digit8" => Some(VirtualKeyCode::Key8),
        "Digit9" => Some(VirtualKeyCode::Key9),
        "Digit0" => Some(VirtualKeyCode::Key0),
        "KeyA" => Some(VirtualKeyCode::A),
        "KeyB" => Some(VirtualKeyCode::B),
        "KeyC" => Some(VirtualKeyCode::C),
        "KeyD" => Some(VirtualKeyCode::D),
        "KeyE" => Some(VirtualKeyCode::E),
        "KeyF" => Some(VirtualKeyCode::F),
        "KeyG" => Some(VirtualKeyCode::G),
        "KeyH" => Some(VirtualKeyCode::H),
        "KeyI" => Some(VirtualKeyCode::I),
        "KeyJ" => Some(VirtualKeyCode::J),
        "KeyK" => Some(VirtualKeyCode::K),
        "KeyL" => Some(VirtualKeyCode::L),
        "KeyM" => Some(VirtualKeyCode::M),
        "KeyN" => Some(VirtualKeyCode::N),
        "KeyO" => Some(VirtualKeyCode::O),
        "KeyP" => Some(VirtualKeyCode::P),
        "KeyQ" => Some(VirtualKeyCode::Q),
        "KeyR" => Some(VirtualKeyCode::R),
        "KeyS" => Some(VirtualKeyCode::S),
        "KeyT" => Some(VirtualKeyCode::T),
        "KeyU" => Some(VirtualKeyCode::U),
        "KeyV" => Some(VirtualKeyCode::V),
        "KeyW" => Some(VirtualKeyCode::W),
        "KeyX" => Some(VirtualKeyCode::X),
        "KeyY" => Some(VirtualKeyCode::Y),
        "KeyZ" => Some(VirtualKeyCode::Z),
        "Escape" => Some(VirtualKeyCode::Escape),
        "F1" => Some(VirtualKeyCode::F1),
        "F2" => Some(VirtualKeyCode::F2),
        "F3" => Some(VirtualKeyCode::F3),
        "F4" => Some(VirtualKeyCode::F4),
        "F5" => Some(VirtualKeyCode::F5),
        "F6" => Some(VirtualKeyCode::F6),
        "F7" => Some(VirtualKeyCode::F7),
        "F8" => Some(VirtualKeyCode::F8),
        "F9" => Some(VirtualKeyCode::F9),
        "F10" => Some(VirtualKeyCode::F10),
        "F11" => Some(VirtualKeyCode::F11),
        "F12" => Some(VirtualKeyCode::F12),
        "F13" => Some(VirtualKeyCode::F13),
        "F14" => Some(VirtualKeyCode::F14),
        "F15" => Some(VirtualKeyCode::F15),
        // "" => Some(VirtualKeyCode::Snapshot),
        "ScrollLock" => Some(VirtualKeyCode::Scroll),
        "Pause" => Some(VirtualKeyCode::Pause),
        "Insert" => Some(VirtualKeyCode::Insert),
        "Home" => Some(VirtualKeyCode::Home),
        "Delete" => Some(VirtualKeyCode::Delete),
        "End" => Some(VirtualKeyCode::End),
        "PageDown" => Some(VirtualKeyCode::PageDown),
        "PageUp" => Some(VirtualKeyCode::PageUp),
        "ArrowLeft" => Some(VirtualKeyCode::Left),
        "ArrowUp" => Some(VirtualKeyCode::Up),
        "ArrowRight" => Some(VirtualKeyCode::Right),
        "ArrowDown" => Some(VirtualKeyCode::Down),
        "Backspace" => Some(VirtualKeyCode::Back),
        "Enter" => Some(VirtualKeyCode::Return),
        "Space" => Some(VirtualKeyCode::Space),
        // "" => Some(VirtualKeyCode::Compose),
        "NumLock" => Some(VirtualKeyCode::Numlock),
        "Numpad0" => Some(VirtualKeyCode::Numpad0),
        "Numpad1" => Some(VirtualKeyCode::Numpad1),
        "Numpad2" => Some(VirtualKeyCode::Numpad2),
        "Numpad3" => Some(VirtualKeyCode::Numpad3),
        "Numpad4" => Some(VirtualKeyCode::Numpad4),
        "Numpad5" => Some(VirtualKeyCode::Numpad5),
        "Numpad6" => Some(VirtualKeyCode::Numpad6),
        "Numpad7" => Some(VirtualKeyCode::Numpad7),
        "Numpad8" => Some(VirtualKeyCode::Numpad8),
        "Numpad9" => Some(VirtualKeyCode::Numpad9),
        // "" => Some(VirtualKeyCode::AbntC1),
        // "" => Some(VirtualKeyCode::AbntC2),
        "NumpadAdd" => Some(VirtualKeyCode::Add),
        "Apostrophe" => Some(VirtualKeyCode::Apostrophe),
        // "" => Some(VirtualKeyCode::Apps),
        // "" => Some(VirtualKeyCode::At),
        // "" => Some(VirtualKeyCode::Ax),
        "Backslash" => Some(VirtualKeyCode::Backslash),
        // "" => Some(VirtualKeyCode::Calculator),
        "CapsLock" => Some(VirtualKeyCode::Capital),
        // "" => Some(VirtualKeyCode::Colon),
        "Comma" => Some(VirtualKeyCode::Comma),
        // "" => Some(VirtualKeyCode::Convert),
        "NumpadDecimal" => Some(VirtualKeyCode::Decimal),
        "NumpadDivide" => Some(VirtualKeyCode::Divide),
        "Equal" => Some(VirtualKeyCode::Equals),
        "Backquote" => Some(VirtualKeyCode::Grave),
        // "" => Some(VirtualKeyCode::Kana),
        // "" => Some(VirtualKeyCode::Kanji),
        // "" => Some(VirtualKeyCode::LAlt),
        "BracketLeft" => Some(VirtualKeyCode::LBracket),
        "ControlLeft" => Some(VirtualKeyCode::LControl),
        "AltLeft" => Some(VirtualKeyCode::LAlt),
        "ShiftLeft" => Some(VirtualKeyCode::LShift),
        // "" => Some(VirtualKeyCode::LWin),
        // "" => Some(VirtualKeyCode::Mail),
        // "" => Some(VirtualKeyCode::MediaSelect),
        // "" => Some(VirtualKeyCode::MediaStop),
        "Minus" => Some(VirtualKeyCode::Minus),
        "NumpadMultiply" => Some(VirtualKeyCode::Multiply),
        // "" => Some(VirtualKeyCode::Mute),
        // "" => Some(VirtualKeyCode::MyComputer),
        // "" => Some(VirtualKeyCode::NavigateForward),
        // "" => Some(VirtualKeyCode::NavigateBackward),
        // "" => Some(VirtualKeyCode::NextTrack),
        // "" => Some(VirtualKeyCode::NoConvert),
        "NumpadComma" => Some(VirtualKeyCode::NumpadComma),
        "NumpadEnter" => Some(VirtualKeyCode::NumpadEnter),
        "NumpadEqual" => Some(VirtualKeyCode::NumpadEquals),
        // "" => Some(VirtualKeyCode::OEM102),
        "Period" => Some(VirtualKeyCode::Period),
        // "" => Some(VirtualKeyCode::PlayPause),
        // "" => Some(VirtualKeyCode::Power),
        // "" => Some(VirtualKeyCode::PrevTrack),
        // "" => Some(VirtualKeyCode::RAlt),
        "BracketRight" => Some(VirtualKeyCode::RBracket),
        "ControlRight" => Some(VirtualKeyCode::RControl),
        "AltRight" => Some(VirtualKeyCode::RAlt),
        "ShiftRight" => Some(VirtualKeyCode::RShift),
        // "" => Some(VirtualKeyCode::RWin),
        "Semicolon" => Some(VirtualKeyCode::Semicolon),
        "Slash" => Some(VirtualKeyCode::Slash),
        // "" => Some(VirtualKeyCode::Sleep),
        // "" => Some(VirtualKeyCode::Stop),
        "NumpadSubtract" => Some(VirtualKeyCode::Subtract),
        // "" => Some(VirtualKeyCode::Sysrq),
        "Tab" => Some(VirtualKeyCode::Tab),
        // "" => Some(VirtualKeyCode::Underline),
        // "" => Some(VirtualKeyCode::Unlabeled),
        // "" => Some(VirtualKeyCode::VolumeDown),
        // "" => Some(VirtualKeyCode::VolumeUp),
        // "" => Some(VirtualKeyCode::Wake),
        // "" => Some(VirtualKeyCode::WebBack),
        // "" => Some(VirtualKeyCode::WebFavorites),
        // "" => Some(VirtualKeyCode::WebForward),
        // "" => Some(VirtualKeyCode::WebHome),
        // "" => Some(VirtualKeyCode::WebRefresh),
        // "" => Some(VirtualKeyCode::WebSearch),
        // "" => Some(VirtualKeyCode::WebStop),
        // "" => Some(VirtualKeyCode::Yen),
        "Caret" => Some(VirtualKeyCode::Caret),
        _ => None,
    }
}
